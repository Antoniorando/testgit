
sketch_oct27a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000346  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  000003ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012cf  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a33  00000000  00000000  000017d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b6  00000000  00000000  00002206  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00002abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000775  00000000  00000000  00002c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000889  00000000  00000000  000033f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003c82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_16>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a9 30       	cpi	r26, 0x09	; 9
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  d8:	0c 94 a1 01 	jmp	0x342	; 0x342 <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <setup>:

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio

void setup() {
  pinMode(4,OUTPUT);
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	84 e0       	ldi	r24, 0x04	; 4
  e4:	0c 94 36 01 	jmp	0x26c	; 0x26c <pinMode>

000000e8 <loop>:

}

void loop() {
	digitalWrite(4,LOW);
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <digitalWrite>

000000f0 <initVariant>:
  f0:	08 95       	ret

000000f2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
  f2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <init>

	initVariant();
  f6:	0e 94 78 00 	call	0xf0	; 0xf0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
  fa:	0e 94 70 00 	call	0xe0	; 0xe0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 102:	0e 94 74 00 	call	0xe8	; 0xe8 <loop>
		if (serialEventRun) serialEventRun();
 106:	20 97       	sbiw	r28, 0x00	; 0
 108:	e1 f3       	breq	.-8      	; 0x102 <main+0x10>
 10a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 10e:	f9 cf       	rjmp	.-14     	; 0x102 <main+0x10>

00000110 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
 126:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
 12a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
 12e:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
 132:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
 136:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <_edata>
 13a:	23 e0       	ldi	r18, 0x03	; 3
 13c:	23 0f       	add	r18, r19
 13e:	2d 37       	cpi	r18, 0x7D	; 125
 140:	20 f4       	brcc	.+8      	; 0x14a <__vector_16+0x3a>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	a1 1d       	adc	r26, r1
 146:	b1 1d       	adc	r27, r1
 148:	05 c0       	rjmp	.+10     	; 0x154 <__vector_16+0x44>
 14a:	26 e8       	ldi	r18, 0x86	; 134
 14c:	23 0f       	add	r18, r19
 14e:	02 96       	adiw	r24, 0x02	; 2
 150:	a1 1d       	adc	r26, r1
 152:	b1 1d       	adc	r27, r1
 154:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 158:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
 15c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
 160:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
 164:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
 168:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 16c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 170:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 174:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	a1 1d       	adc	r26, r1
 17c:	b1 1d       	adc	r27, r1
 17e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 182:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 186:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 18a:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 1a4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 1a6:	84 b5       	in	r24, 0x24	; 36
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 1ac:	84 b5       	in	r24, 0x24	; 36
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 1b2:	85 b5       	in	r24, 0x25	; 37
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 1b8:	85 b5       	in	r24, 0x25	; 37
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 1be:	ee e6       	ldi	r30, 0x6E	; 110
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 1c8:	e1 e8       	ldi	r30, 0x81	; 129
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 1ce:	80 81       	ld	r24, Z
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 1d4:	80 81       	ld	r24, Z
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 1da:	e0 e8       	ldi	r30, 0x80	; 128
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 1e4:	e1 eb       	ldi	r30, 0xB1	; 177
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	84 60       	ori	r24, 0x04	; 4
 1ec:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 1ee:	e0 eb       	ldi	r30, 0xB0	; 176
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 1f8:	ea e7       	ldi	r30, 0x7A	; 122
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	84 60       	ori	r24, 0x04	; 4
 200:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 202:	80 81       	ld	r24, Z
 204:	82 60       	ori	r24, 0x02	; 2
 206:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 208:	80 81       	ld	r24, Z
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 20e:	80 81       	ld	r24, Z
 210:	80 68       	ori	r24, 0x80	; 128
 212:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 214:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 218:	08 95       	ret

0000021a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 21a:	83 30       	cpi	r24, 0x03	; 3
 21c:	81 f0       	breq	.+32     	; 0x23e <turnOffPWM+0x24>
 21e:	28 f4       	brcc	.+10     	; 0x22a <turnOffPWM+0x10>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	99 f0       	breq	.+38     	; 0x24a <turnOffPWM+0x30>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	a1 f0       	breq	.+40     	; 0x250 <turnOffPWM+0x36>
 228:	08 95       	ret
 22a:	87 30       	cpi	r24, 0x07	; 7
 22c:	a9 f0       	breq	.+42     	; 0x258 <turnOffPWM+0x3e>
 22e:	88 30       	cpi	r24, 0x08	; 8
 230:	b9 f0       	breq	.+46     	; 0x260 <turnOffPWM+0x46>
 232:	84 30       	cpi	r24, 0x04	; 4
 234:	d1 f4       	brne	.+52     	; 0x26a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 236:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 23a:	8f 7d       	andi	r24, 0xDF	; 223
 23c:	03 c0       	rjmp	.+6      	; 0x244 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 23e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 242:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 244:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 248:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 24a:	84 b5       	in	r24, 0x24	; 36
 24c:	8f 77       	andi	r24, 0x7F	; 127
 24e:	02 c0       	rjmp	.+4      	; 0x254 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 250:	84 b5       	in	r24, 0x24	; 36
 252:	8f 7d       	andi	r24, 0xDF	; 223
 254:	84 bd       	out	0x24, r24	; 36
 256:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 258:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 25c:	8f 77       	andi	r24, 0x7F	; 127
 25e:	03 c0       	rjmp	.+6      	; 0x266 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 260:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 264:	8f 7d       	andi	r24, 0xDF	; 223
 266:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 26a:	08 95       	ret

0000026c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	fc 01       	movw	r30, r24
 274:	e4 58       	subi	r30, 0x84	; 132
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 27a:	fc 01       	movw	r30, r24
 27c:	e0 57       	subi	r30, 0x70	; 112
 27e:	ff 4f       	sbci	r31, 0xFF	; 255
 280:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 282:	88 23       	and	r24, r24
 284:	61 f1       	breq	.+88     	; 0x2de <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	fc 01       	movw	r30, r24
 28e:	e2 55       	subi	r30, 0x52	; 82
 290:	ff 4f       	sbci	r31, 0xFF	; 255
 292:	c5 91       	lpm	r28, Z+
 294:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 296:	fc 01       	movw	r30, r24
 298:	ec 55       	subi	r30, 0x5C	; 92
 29a:	ff 4f       	sbci	r31, 0xFF	; 255
 29c:	a5 91       	lpm	r26, Z+
 29e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 2a0:	61 11       	cpse	r22, r1
 2a2:	09 c0       	rjmp	.+18     	; 0x2b6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 2a4:	9f b7       	in	r25, 0x3f	; 63
                cli();
 2a6:	f8 94       	cli
		*reg &= ~bit;
 2a8:	88 81       	ld	r24, Y
 2aa:	20 95       	com	r18
 2ac:	82 23       	and	r24, r18
 2ae:	88 83       	st	Y, r24
		*out &= ~bit;
 2b0:	ec 91       	ld	r30, X
 2b2:	2e 23       	and	r18, r30
 2b4:	0b c0       	rjmp	.+22     	; 0x2cc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 2b6:	62 30       	cpi	r22, 0x02	; 2
 2b8:	61 f4       	brne	.+24     	; 0x2d2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 2ba:	9f b7       	in	r25, 0x3f	; 63
                cli();
 2bc:	f8 94       	cli
		*reg &= ~bit;
 2be:	88 81       	ld	r24, Y
 2c0:	32 2f       	mov	r19, r18
 2c2:	30 95       	com	r19
 2c4:	83 23       	and	r24, r19
 2c6:	88 83       	st	Y, r24
		*out |= bit;
 2c8:	ec 91       	ld	r30, X
 2ca:	2e 2b       	or	r18, r30
 2cc:	2c 93       	st	X, r18
		SREG = oldSREG;
 2ce:	9f bf       	out	0x3f, r25	; 63
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 2d2:	8f b7       	in	r24, 0x3f	; 63
                cli();
 2d4:	f8 94       	cli
		*reg |= bit;
 2d6:	e8 81       	ld	r30, Y
 2d8:	2e 2b       	or	r18, r30
 2da:	28 83       	st	Y, r18
		SREG = oldSREG;
 2dc:	8f bf       	out	0x3f, r24	; 63
	}
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 2ea:	28 2f       	mov	r18, r24
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	f9 01       	movw	r30, r18
 2f0:	e8 59       	subi	r30, 0x98	; 152
 2f2:	ff 4f       	sbci	r31, 0xFF	; 255
 2f4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 2f6:	f9 01       	movw	r30, r18
 2f8:	e4 58       	subi	r30, 0x84	; 132
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 2fe:	f9 01       	movw	r30, r18
 300:	e0 57       	subi	r30, 0x70	; 112
 302:	ff 4f       	sbci	r31, 0xFF	; 255
 304:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 306:	cc 23       	and	r28, r28
 308:	c1 f0       	breq	.+48     	; 0x33a <digitalWrite+0x56>
 30a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 30c:	81 11       	cpse	r24, r1
 30e:	0e 94 0d 01 	call	0x21a	; 0x21a <turnOffPWM>

	out = portOutputRegister(port);
 312:	ec 2f       	mov	r30, r28
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	ee 0f       	add	r30, r30
 318:	ff 1f       	adc	r31, r31
 31a:	ec 55       	subi	r30, 0x5C	; 92
 31c:	ff 4f       	sbci	r31, 0xFF	; 255
 31e:	a5 91       	lpm	r26, Z+
 320:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 322:	9f b7       	in	r25, 0x3f	; 63
	cli();
 324:	f8 94       	cli

	if (val == LOW) {
 326:	11 11       	cpse	r17, r1
 328:	04 c0       	rjmp	.+8      	; 0x332 <digitalWrite+0x4e>
		*out &= ~bit;
 32a:	8c 91       	ld	r24, X
 32c:	d0 95       	com	r29
 32e:	d8 23       	and	r29, r24
 330:	02 c0       	rjmp	.+4      	; 0x336 <digitalWrite+0x52>
	} else {
		*out |= bit;
 332:	ec 91       	ld	r30, X
 334:	de 2b       	or	r29, r30
 336:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 338:	9f bf       	out	0x3f, r25	; 63
}
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	08 95       	ret

00000342 <_exit>:
 342:	f8 94       	cli

00000344 <__stop_program>:
 344:	ff cf       	rjmp	.-2      	; 0x344 <__stop_program>
